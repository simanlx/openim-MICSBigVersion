def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.mics_big_version"
        minSdkVersion 21
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        ndk {
//            abiFilters "arm64-v8a", "armeabi-v7a"//, "armeabi", "x86", "x86_64", "mips", "mips64"
            abiFilters  "armeabi-v7a"//, "armeabi", "x86", "x86_64", "mips", "mips64"
        }

        sourceSets.main {
            jniLibs.srcDir 'libs'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "cf47465a368f24c659608e7e", // NOTE: JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
                XIAOMI_APPKEY : "MI-5852008579936", // 小米平台注册的appkey,注意不要将前缀去掉 MI-appkey
                XIAOMI_APPID  : "MI-2882303761520085936", // 小米平台注册的appid，注意不要将前缀去掉 MI-appid
                MEIZU_APPKEY  : "MZ-989fb579ffbe468191f5c611691dc424",
                MEIZU_APPID   : "MZ-145050",
//                OPPO_APPKEY   : "OP-oppo的APPKEY",
//                OPPO_APPID    : "OP-oppo的APPID",
//                OPPO_APPSECRET: "OP-oppo的APPSECRET",
//                VIVO_APPKEY   : "vivo的APPKEY",
//                VIVO_APPID    : "vivo的APPID"
        ]

    }


    signingConfigs {
        release {
            keyAlias 'bkrs'
            keyPassword '12341234'
            storeFile file('./bigscreen.jks')
            storePassword '12341234'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            ndk {
                abiFilters "armeabi-v7a"//, "armeabi", "x86", "x86_64", "mips", "mips64"
//                abiFilters "arm64-v8a", "armeabi-v7a"//, "armeabi", "x86", "x86_64", "mips", "mips64"
            }
        }

        release {
//            minifyEnabled false
//            useProguard false
//            shrinkResources false
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
            ndk {
                abiFilters "armeabi-v7a"//, "armeabi", "x86", "x86_64", "mips", "mips64"
//                abiFilters "arm64-v8a", "armeabi-v7a"//, "armeabi", "x86", "x86_64", "mips", "mips64"
            }
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation files('libs\\RaisoundSDK_V2.0.0.aar')
    implementation 'io.github.jeremyliao:live-event-bus-x:1.8.0'

    implementation "io.reactivex.rxjava2:rxjava:2.1.16" // 必要rxjava2依赖
    implementation "io.reactivex.rxjava2:rxandroid:2.0.2" // 必要rxandrroid依赖，切线程时需要用到
    implementation 'com.squareup.retrofit2:retrofit:2.4.0' // 必要retrofit依赖
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0' // 必要依赖，和Rxjava结合必须用到，下面会提到
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0' // 必要依赖，解析json字符所用
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation files('libs\\raisound_vp_dc.jar')
    implementation files('libs\\RaisoundTTS.jar')
}
